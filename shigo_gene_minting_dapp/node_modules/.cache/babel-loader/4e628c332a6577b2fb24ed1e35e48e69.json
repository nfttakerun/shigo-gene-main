{"ast":null,"code":"import _regeneratorRuntime from\"/Users/takerun/Documents/shigo-gene-main/shigo_gene_minting_dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/takerun/Documents/shigo-gene-main/shigo_gene_minting_dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// log\nimport store from\"../store\";var fetchDataRequest=function fetchDataRequest(){return{type:\"CHECK_DATA_REQUEST\"};};var fetchDataSuccess=function fetchDataSuccess(payload){return{type:\"CHECK_DATA_SUCCESS\",payload:payload};};var fetchDataFailed=function fetchDataFailed(payload){return{type:\"CHECK_DATA_FAILED\",payload:payload};};export var fetchData=function fetchData(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var blockchain,totalSupply,userMintedAmount,paused,onlyAllowlisted,maxMintAmountPerTransaction,mintCount,publicSaleMaxMintAmountPerAddress,allowlistUserAmount,allowlistType;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchDataRequest());_context.prev=1;blockchain=store.getState().blockchain;_context.next=5;return store.getState().blockchain.smartContract.methods.totalSupply().call();case 5:totalSupply=_context.sent;_context.next=8;return store.getState().blockchain.smartContract.methods.getUserMintedAmount(blockchain.account).call();case 8:userMintedAmount=_context.sent;_context.next=11;return store.getState().blockchain.smartContract.methods.paused().call();case 11:paused=_context.sent;_context.next=14;return store.getState().blockchain.smartContract.methods.onlyAllowlisted().call();case 14:onlyAllowlisted=_context.sent;_context.next=17;return store.getState().blockchain.smartContract.methods.maxMintAmountPerTransaction().call();case 17:maxMintAmountPerTransaction=_context.sent;_context.next=20;return store.getState().blockchain.smartContract.methods.mintCount().call();case 20:mintCount=_context.sent;_context.next=23;return store.getState().blockchain.smartContract.methods.publicSaleMaxMintAmountPerAddress().call();case 23:publicSaleMaxMintAmountPerAddress=_context.sent;_context.next=26;return store.getState().blockchain.smartContract.methods.getAllowlistUserAmount(blockchain.account).call();case 26:allowlistUserAmount=_context.sent;_context.next=29;return store.getState().blockchain.smartContract.methods.allowlistType().call();case 29:allowlistType=_context.sent;dispatch(fetchDataSuccess({totalSupply:totalSupply,userMintedAmount:userMintedAmount,paused:paused,onlyAllowlisted:onlyAllowlisted,maxMintAmountPerTransaction:maxMintAmountPerTransaction,mintCount:mintCount,publicSaleMaxMintAmountPerAddress:publicSaleMaxMintAmountPerAddress,allowlistUserAmount:allowlistUserAmount,allowlistType:allowlistType}));_context.next=37;break;case 33:_context.prev=33;_context.t0=_context[\"catch\"](1);console.log(_context.t0);dispatch(fetchDataFailed(\"Could not load data from contract.\"));case 37:case\"end\":return _context.stop();}}},_callee,null,[[1,33]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","blockchain","getState","smartContract","methods","totalSupply","call","getUserMintedAmount","account","userMintedAmount","paused","onlyAllowlisted","maxMintAmountPerTransaction","mintCount","publicSaleMaxMintAmountPerAddress","getAllowlistUserAmount","allowlistUserAmount","allowlistType","console","log"],"sources":["/Users/takerun/Documents/shigo-gene-main/shigo_gene_minting_dapp/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n\n      const blockchain = store.getState().blockchain\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let userMintedAmount = await store.getState().blockchain.smartContract.methods.getUserMintedAmount(blockchain.account).call()\n      let paused = await store.getState().blockchain.smartContract.methods.paused().call();\n      let onlyAllowlisted = await store.getState().blockchain.smartContract.methods.onlyAllowlisted().call()\n      let maxMintAmountPerTransaction = await store.getState().blockchain.smartContract.methods.maxMintAmountPerTransaction().call();\n      let mintCount = await store.getState().blockchain.smartContract.methods.mintCount().call()\n      let publicSaleMaxMintAmountPerAddress = await store.getState().blockchain.smartContract.methods.publicSaleMaxMintAmountPerAddress().call()\n      let allowlistUserAmount = await store.getState().blockchain.smartContract.methods.getAllowlistUserAmount(blockchain.account).call()\n      let allowlistType = await store.getState().blockchain.smartContract.methods.allowlistType().call()\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply,\n          userMintedAmount,\n          paused,\n          onlyAllowlisted,\n          maxMintAmountPerTransaction,\n          mintCount,\n          publicSaleMaxMintAmountPerAddress,\n          allowlistUserAmount,\n          allowlistType,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"2WAAA;AACA,MAAOA,MAAP,KAAkB,UAAlB,CAEA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,EAAM,CAC7B,MAAO,CACLC,IAAI,CAAE,oBADD,CAAP,CAGD,CAJD,CAMA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACC,OAAD,CAAa,CACpC,MAAO,CACLF,IAAI,CAAE,oBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAMC,gBAAe,CAAG,QAAlBA,gBAAkB,CAACD,OAAD,CAAa,CACnC,MAAO,CACLF,IAAI,CAAE,mBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,MAAO,IAAME,UAAS,CAAG,QAAZA,UAAY,EAAM,CAC7B,+FAAO,iBAAOC,QAAP,+RACLA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR,CADK,gBAIGO,UAJH,CAIgBR,KAAK,CAACS,QAAN,GAAiBD,UAJjC,uBAKqBR,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDC,WAAlD,GAAgEC,IAAhE,EALrB,QAKCD,WALD,qCAM0BZ,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDG,mBAAlD,CAAsEN,UAAU,CAACO,OAAjF,EAA0FF,IAA1F,EAN1B,QAMCG,gBAND,sCAOgBhB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDM,MAAlD,GAA2DJ,IAA3D,EAPhB,SAOCI,MAPD,sCAQyBjB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDO,eAAlD,GAAoEL,IAApE,EARzB,SAQCK,eARD,sCASqClB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDQ,2BAAlD,GAAgFN,IAAhF,EATrC,SASCM,2BATD,sCAUmBnB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDS,SAAlD,GAA8DP,IAA9D,EAVnB,SAUCO,SAVD,sCAW2CpB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDU,iCAAlD,GAAsFR,IAAtF,EAX3C,SAWCQ,iCAXD,sCAY6BrB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDW,sBAAlD,CAAyEd,UAAU,CAACO,OAApF,EAA6FF,IAA7F,EAZ7B,SAYCU,mBAZD,sCAauBvB,MAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BE,aAA5B,CAA0CC,OAA1C,CAAkDa,aAAlD,GAAkEX,IAAlE,EAbvB,SAaCW,aAbD,eAeHjB,QAAQ,CACNJ,gBAAgB,CAAC,CACfS,WAAW,CAAXA,WADe,CAEfI,gBAAgB,CAAhBA,gBAFe,CAGfC,MAAM,CAANA,MAHe,CAIfC,eAAe,CAAfA,eAJe,CAKfC,2BAA2B,CAA3BA,2BALe,CAMfC,SAAS,CAATA,SANe,CAOfC,iCAAiC,CAAjCA,iCAPe,CAQfE,mBAAmB,CAAnBA,mBARe,CASfC,aAAa,CAAbA,aATe,CAAD,CADV,CAAR,CAfG,iFA6BHC,OAAO,CAACC,GAAR,cACAnB,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR,CA9BG,qEAAP,+DAiCD,CAlCM"},"metadata":{},"sourceType":"module"}